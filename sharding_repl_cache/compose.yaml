name: sharding-repl-cache
# version: '3'
services:
  # //сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv 
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - config-data:/data/db
    command:
      [
        "mongod",
        "--configsvr",  #//запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

    # //1-й шард 
  shard1:
    image: mongo:latest
    container_name: shard1
    restart: always
    ports:
      - "27018:27018"
    volumes:
      - shard1-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr", #//запуск в режиме шардинга
        "--replSet",
        "shard1", #//название реплики
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # //2-й шард 
  shard2:
    image: mongo:latest
    container_name: shard2
    restart: always
    ports:
      - "27019:27019"
    volumes:
      - shard2-data:/data/db
    command:
      [
        "mongod",
        "--shardsvr", #//запуск в режиме шардинга
        "--replSet",
        "shard2", #//название реплик
        "--bind_ip_all", #// обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  # //роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    command:
      [
        "mongos", #//обычная mongo в режиме роутера
        "--configdb",
        "config_server/configSrv:27017", #//передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard11:
    image: mongo:latest # docker образ
    container_name: shard11
    restart: always
    ports:
      - "27118:27118"
    volumes:
      - shard11-data:/data/db
    command:
      [
        "mongod",
        "--replSet",
        "shard1", #//название реплики
        "--bind_ip_all",
        "--port",
        "27118"
      ] #команда для создания реплики
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard12:
    image: mongo:latest
    container_name: shard12
    restart: always
    ports:
      - "27218:27218"
    volumes:
      - shard12-data:/data/db
    command:
      [
        "mongod",
        "--replSet",
        "shard1", #//название реплики
        "--bind_ip_all",
        "--port",
        "27218"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard21:
    image: mongo:latest
    container_name: shard21
    restart: always
    ports:
      - "27119:27119"
    volumes:
      - shard21-data:/data/db
    command:
      [
        "mongod",
        "--replSet",
        "shard2", #//название реплики
        "--bind_ip_all",
        "--port",
        "27119"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard22:
    image: mongo:latest
    container_name: shard22
    restart: always
    ports:
      - "27219:27219"
    volumes:
      - shard22-data:/data/db
    command:
      [
        "mongod",
        "--replSet",
        "shard2", #//название реплики
        "--bind_ip_all",
        "--port",
        "27219"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [
      "redis-server",
      "/usr/local/etc/redis/redis.conf"
    ]

  pymongo_api_sharding:
    container_name: pymongo_api_sharding
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379" 


volumes:
  config-data:
  shard1-data:
  shard11-data:
  shard12-data:
  shard2-data:
  shard21-data:
  shard22-data:
  redis-data:
